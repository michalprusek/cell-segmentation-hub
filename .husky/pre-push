#!/bin/sh

# Pre-push hook - runs heavier checks before pushing to remote
# These checks are too slow for pre-commit but important for quality

set -e

echo "üöÄ Running pre-push quality checks..."

# Colors
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

# 1. Security audit for dependencies
echo -e "${BLUE}üîí Running security audit...${NC}"
if command -v npm >/dev/null 2>&1; then
    echo "Checking npm dependencies..."
    npm audit --production 2>/dev/null || {
        AUDIT_RESULT=$?
        if [ $AUDIT_RESULT -gt 0 ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  Security vulnerabilities found in dependencies${NC}"
            echo "Run 'npm audit' for details"
            read -p "Continue push anyway? (y/N) " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                exit 1
            fi
        fi
    }
fi

# 2. Check for circular dependencies
echo -e "${BLUE}üîÑ Checking for circular dependencies...${NC}"
if command -v madge >/dev/null 2>&1; then
    if ! npx madge --circular src/ 2>/dev/null; then
        echo -e "${RED}‚ùå Circular dependencies detected!${NC}"
        echo "Run 'npx madge --circular src/' for details"
        exit 1
    fi
fi

# 3. Bundle size check
echo -e "${BLUE}üì¶ Checking bundle size...${NC}"
if [ -f "package.json" ] && command -v npm >/dev/null 2>&1; then
    # Build and check size
    npm run build 2>/dev/null || true
    if [ -d "dist" ]; then
        TOTAL_SIZE=$(du -sb dist | cut -f1)
        MAX_SIZE=$((10 * 1024 * 1024)) # 10MB limit
        if [ $TOTAL_SIZE -gt $MAX_SIZE ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  Bundle size is large: $(($TOTAL_SIZE / 1024 / 1024))MB${NC}"
            echo "Consider code splitting or lazy loading"
        fi
    fi
fi

# 4. Test coverage check
echo -e "${BLUE}üß™ Checking test coverage...${NC}"
if [ -f "vitest.config.ts" ] && command -v npm >/dev/null 2>&1; then
    # Run tests with coverage
    npm run test:coverage 2>/dev/null || {
        echo -e "${YELLOW}‚ö†Ô∏è  Some tests are failing${NC}"
        read -p "Push with failing tests? (y/N) " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    }
fi

# 5. Documentation check
echo -e "${BLUE}üìö Checking documentation...${NC}"
UNDOCUMENTED=$(find src -name "*.tsx" -o -name "*.ts" | xargs grep -l "export.*function\|export.*class" | while read file; do
    if ! grep -q "@param\|@returns\|/\*\*" "$file" 2>/dev/null; then
        echo "$file"
    fi
done | head -5)

if [ ! -z "$UNDOCUMENTED" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Found undocumented exports in:${NC}"
    echo "$UNDOCUMENTED" | head -5
    echo "Consider adding JSDoc comments"
fi

echo -e "${GREEN}‚úÖ Pre-push checks completed${NC}"
exit 0