#!/bin/sh

# Enhanced pre-commit hook for SpheroSeg project
# Strict checks to maintain code quality
set -e

echo "üîê Running enhanced pre-commit checks..."

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

# Track if we have warnings
WARNINGS=0

# 1. Check branch protection
BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [ "$BRANCH" = "main" ] || [ "$BRANCH" = "master" ] || [ "$BRANCH" = "production" ]; then
    echo -e "${RED}‚ùå Error: Direct commits to $BRANCH branch are not allowed${NC}"
    echo "Please create a feature branch and use a pull request"
    exit 1
fi

# 2. Check for merge conflict markers
if git diff --cached --name-only | xargs grep -l "^<<<<<<< \|^>>>>>>> \|^=======$" 2>/dev/null | head -1 | grep -q .; then
    echo -e "${RED}‚ùå Error: Merge conflict markers found in staged files${NC}"
    exit 1
fi

# 3. Check for debugger statements and console.log (excluding test files, logger files, and comments)
echo "üîç Checking for debug code..."
DEBUG_FILES=$(git diff --cached --name-only | grep -E "\.(js|jsx|ts|tsx)$" | grep -v -E "(test|spec|setup|eslint\.config|code-quality-check|logger|test-data-manager)\..*$" | xargs grep -l -E "^[^/]*\b(debugger|console\.log)\b" 2>/dev/null || true)
if [ ! -z "$DEBUG_FILES" ]; then
    echo -e "${RED}‚ùå Error: Found debug statements in:${NC}"
    echo "$DEBUG_FILES" | while read file; do
        echo "  - $file"
        grep -n -E "^[^/]*\b(debugger|console\.(log|debug|info|warn|error))\b" "$file" | head -3
    done
    echo -e "${YELLOW}üí° Tip: Use proper logging utilities instead of console.log${NC}"
    exit 1
fi

# 4. Check for TODO/FIXME comments (warning only)
TODO_FILES=$(git diff --cached --name-only | xargs grep -l -E "(TODO|FIXME|HACK|XXX)" 2>/dev/null || true)
if [ ! -z "$TODO_FILES" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: Found TODO/FIXME comments in staged files:${NC}"
    echo "$TODO_FILES" | while read file; do
        echo "  - $file"
    done
    WARNINGS=$((WARNINGS + 1))
fi

# 5. Check for potential secrets (temporarily disabled for false positives)
# echo "üîí Checking for sensitive data..."
# SECRETS=$(git diff --cached --name-only | xargs grep -E -l "(api[_-]?key|apikey|secret|password|token|private[_-]?key|auth|credential)" 2>/dev/null || true)
# if [ ! -z "$SECRETS" ]; then
#     # Check if they're actual secrets (not just variable names)
#     for file in $SECRETS; do
#         if grep -E "(api[_-]?key|apikey|password)\s*[:=]\s*['\"][^'\"]{10,}" "$file" 2>/dev/null | grep -v "// \|/\*\|shareToken\|tokenExpiry" | head -1 | grep -q .; then
#             echo -e "${RED}‚ùå Error: Potential secrets found in $file${NC}"
#             echo "Remove sensitive data before committing"
#             exit 1
#         fi
#     done
# fi

# 6. Check for large files (>1MB)
LARGE_FILES=$(git diff --cached --name-only | while read file; do
    if [ -f "$file" ]; then
        SIZE=$(wc -c < "$file")
        if [ $SIZE -gt 1048576 ]; then
            echo "$file ($(($SIZE / 1048576))MB)"
        fi
    fi
done)
if [ ! -z "$LARGE_FILES" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: Large files detected:${NC}"
    echo "$LARGE_FILES"
    echo "Consider using Git LFS for large files"
    WARNINGS=$((WARNINGS + 1))
fi

# 7. Run ESLint with strict settings (no auto-fix in pre-commit)
if command -v npx >/dev/null 2>&1 && [ -f "package.json" ]; then
    echo "‚è≥ Running ESLint (strict mode)..."
    # Allow reasonable number of warnings during transition period
    if ! npx eslint . --max-warnings 200; then
        echo -e "${RED}‚ùå Error: ESLint found too many issues${NC}"
        echo -e "${YELLOW}üí° Run 'npm run lint:fix' to auto-fix some issues${NC}"
        echo -e "${YELLOW}üìã See issue #20 for tracking remaining warnings${NC}"
        # Don't block commits while we're fixing issues incrementally
        WARNINGS=$((WARNINGS + 1))
    fi
    
    echo "‚è≥ Checking code formatting..."
    if ! npx prettier --check .; then
        echo -e "${RED}‚ùå Error: Code formatting issues found${NC}"
        echo -e "${YELLOW}üí° Run 'npm run format' to fix formatting${NC}"
        exit 1
    fi
fi

# 8. Check TypeScript (both frontend and backend)
if [ -f "tsconfig.json" ] && command -v npx >/dev/null 2>&1; then
    echo "‚è≥ Checking frontend TypeScript..."
    if ! npx tsc --noEmit; then
        echo -e "${RED}‚ùå Error: Frontend TypeScript compilation failed${NC}"
        exit 1
    fi
fi

if [ -f "backend/tsconfig.json" ] && command -v npx >/dev/null 2>&1; then
    echo "‚è≥ Checking backend TypeScript..."
    cd backend
    if ! npx tsc --noEmit; then
        echo -e "${RED}‚ùå Error: Backend TypeScript compilation failed${NC}"
        cd ..
        exit 1
    fi
    cd ..
fi

# 9. Check Python files (if changed)
PYTHON_FILES=$(git diff --cached --name-only | grep -E "\.py$" || true)
if [ ! -z "$PYTHON_FILES" ]; then
    if command -v ruff >/dev/null 2>&1; then
        echo "‚è≥ Checking Python code with ruff..."
        if ! ruff check $PYTHON_FILES; then
            echo -e "${YELLOW}‚ö†Ô∏è  Warning: Python linting issues found${NC}"
            WARNINGS=$((WARNINGS + 1))
        fi
    elif command -v flake8 >/dev/null 2>&1; then
        echo "‚è≥ Checking Python code with flake8..."
        if ! flake8 $PYTHON_FILES; then
            echo -e "${YELLOW}‚ö†Ô∏è  Warning: Python linting issues found${NC}"
            WARNINGS=$((WARNINGS + 1))
        fi
    fi
fi

# 10. Run lint-staged for additional checks
if command -v npx >/dev/null 2>&1 && [ -f ".lintstagedrc.json" ]; then
    echo "‚è≥ Running lint-staged..."
    if ! npx lint-staged; then
        echo -e "${RED}‚ùå Error: lint-staged checks failed${NC}"
        exit 1
    fi
fi

# 11. Check commit message format (if commit message is available)
if [ -f ".gitmessage" ]; then
    # This would be checked in commit-msg hook instead
    true
fi

# Summary
if [ $WARNINGS -gt 0 ]; then
    echo -e "${YELLOW}‚úì Pre-commit checks passed with $WARNINGS warning(s)${NC}"
else
    echo -e "${GREEN}‚úÖ All pre-commit checks passed successfully!${NC}"
fi

exit 0