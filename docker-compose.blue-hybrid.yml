version: '3.8'

services:
  # Blue Backend with hybrid email support
  blue-backend:
    build:
      context: ./backend
      dockerfile: ../docker/backend.prod.Dockerfile
    container_name: blue-backend
    ports:
      - "4001:3001"
    networks:
      - blue-network
    depends_on:
      postgres-blue:
        condition: service_healthy
      redis-blue:
        condition: service_healthy
      mailhog-blue:
        condition: service_started
    environment:
      - NODE_ENV=production
      - HOST=0.0.0.0
      - PORT=3001
      - API_BASE_URL=https://spherosegapp.utia.cas.cz
      - DATABASE_URL=postgresql://spheroseg:${DB_PASSWORD}@postgres-blue:5432/spheroseg_blue
      - REDIS_URL=redis://redis-blue:6379
      - JWT_ACCESS_SECRET=${BLUE_JWT_ACCESS_SECRET}
      - JWT_REFRESH_SECRET=${BLUE_JWT_REFRESH_SECRET}
      - SEGMENTATION_SERVICE_URL=http://blue-ml:8000
      - FROM_EMAIL=spheroseg@utia.cas.cz
      - ALLOWED_ORIGINS=https://spherosegapp.utia.cas.cz
      - WS_ALLOWED_ORIGINS=https://spherosegapp.utia.cas.cz
      - FRONTEND_URL=https://spherosegapp.utia.cas.cz
      
      # Hybrid email configuration
      # For MailHog (development/testing):
      #   EMAIL_SERVICE=smtp
      #   SMTP_HOST=mailhog-blue
      # For SendGrid (production):
      #   EMAIL_SERVICE=sendgrid
      #   SENDGRID_API_KEY=your_key
      - EMAIL_SERVICE=${EMAIL_SERVICE:-smtp}
      - SMTP_HOST=${SMTP_HOST:-mailhog-blue}
      - SMTP_PORT=${SMTP_PORT:-1025}
      - SMTP_SECURE=${SMTP_SECURE:-false}
      - SMTP_AUTH=${SMTP_AUTH:-false}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY:-}
      
    volumes:
      - ./backend/uploads/blue:/app/backend/uploads
      - ./backend/data/blue:/app/backend/data
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Blue Frontend
  blue-frontend:
    build:
      context: .
      dockerfile: docker/frontend.prod.Dockerfile
      args:
        - VITE_API_URL=https://spherosegapp.utia.cas.cz
        - VITE_API_BASE_URL=https://spherosegapp.utia.cas.cz/api
        - VITE_ML_SERVICE_URL=https://spherosegapp.utia.cas.cz/api/ml
        - VITE_WS_URL=wss://spherosegapp.utia.cas.cz
    container_name: blue-frontend
    ports:
      - "4000:80"
    networks:
      - blue-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Blue PostgreSQL Database
  postgres-blue:
    image: postgres:15-alpine
    container_name: postgres-blue
    networks:
      - blue-network
    environment:
      - POSTGRES_USER=spheroseg
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=spheroseg_blue
    volumes:
      - postgres_blue_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U spheroseg -d spheroseg_blue"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Blue Redis Cache
  redis-blue:
    image: redis:7-alpine
    container_name: redis-blue
    networks:
      - blue-network
    volumes:
      - redis_blue_data:/data
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Blue ML Service (port 4008)
  blue-ml:
    build:
      context: ./backend/segmentation
      dockerfile: ../../docker/ml.Dockerfile
    container_name: blue-ml
    ports:
      - "4008:8000"
    networks:
      - blue-network
    depends_on:
      postgres-blue:
        condition: service_healthy
      redis-blue:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://spheroseg:${DB_PASSWORD}@postgres-blue:5432/spheroseg_blue
      - REDIS_URL=redis://redis-blue:6379
      - ENVIRONMENT=production-blue
    volumes:
      - ./backend/segmentation/weights:/app/weights:ro
      - ./backend/uploads/blue:/app/uploads
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MailHog Email Testing Service (Optional - for development)
  mailhog-blue:
    image: mailhog/mailhog:latest
    container_name: mailhog-blue
    ports:
      - "8025:8025"  # Web UI
      - "1025:1025"  # SMTP server
    networks:
      - blue-network
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy (using unified config)
  nginx-blue:
    image: nginx:alpine
    container_name: nginx-blue
    volumes:
      - ./docker/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - blue-frontend
      - blue-backend
      - blue-ml
    networks:
      - blue-network
    restart: always
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  blue-network:
    driver: bridge
    name: spheroseg-blue

volumes:
  postgres_blue_data:
    name: spheroseg_postgres_blue
  redis_blue_data:
    name: spheroseg_redis_blue