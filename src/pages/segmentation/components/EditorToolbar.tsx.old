
import React from 'react';
import { Button } from "@/components/ui/button";
import { 
  ZoomIn, 
  ZoomOut, 
  Maximize2,
  Edit3,
  Undo2,
  Redo2,
  Scissors,
  Plus,
  Save,
  Loader2,
  Trash2
} from 'lucide-react';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { motion } from "framer-motion";
import { useLanguage } from '@/contexts/LanguageContext';

interface EditorToolbarProps {
  zoom: number;
  onZoomIn: () => void;
  onZoomOut: () => void;
  onResetView: () => void;
  onSave: () => Promise<void>;
  saving: boolean;
  editMode: boolean;
  slicingMode: boolean;
  pointAddingMode: boolean;
  deleteMode: boolean;
  onToggleEditMode: () => void;
  onToggleSlicingMode: () => void;
  onTogglePointAddingMode: () => void;
  onToggleDeleteMode: () => void;
  onUndo: () => void;
  onRedo: () => void;
  canUndo: boolean;
  canRedo: boolean;
}

const EditorToolbar = ({
  zoom,
  onZoomIn,
  onZoomOut,
  onResetView,
  onSave,
  saving,
  editMode,
  slicingMode,
  pointAddingMode,
  deleteMode,
  onToggleEditMode,
  onToggleSlicingMode,
  onTogglePointAddingMode,
  onToggleDeleteMode,
  onUndo,
  onRedo,
  canUndo,
  canRedo
}: EditorToolbarProps) => {
  const { t } = useLanguage();
  
  const ToolButton = ({ 
    active, 
    variant = "default", 
    children, 
    onClick, 
    disabled = false, 
    tooltip 
  }: {
    active?: boolean;
    variant?: "default" | "edit" | "slice" | "add" | "delete";
    children: React.ReactNode;
    onClick: () => void;
    disabled?: boolean;
    tooltip: string;
  }) => {
    const getActiveClasses = () => {
      if (!active) return "bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 border-gray-300 dark:border-gray-600";
      
      switch (variant) {
        case "edit":
          return "bg-gradient-to-br from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 shadow-purple-500/20 shadow-lg border-purple-400/50";
        case "slice":
          return "bg-gradient-to-br from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 shadow-red-500/20 shadow-lg border-red-400/50";
        case "add":
          return "bg-gradient-to-br from-emerald-500 to-emerald-600 hover:from-emerald-600 hover:to-emerald-700 shadow-emerald-500/20 shadow-lg border-emerald-400/50";
        case "delete":
          return "bg-gradient-to-br from-orange-500 to-red-600 hover:from-orange-600 hover:to-red-700 shadow-orange-500/20 shadow-lg border-orange-400/50";
        default:
          return "bg-gradient-to-br from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 shadow-blue-500/20 shadow-lg border-blue-400/50";
      }
    };

    return (
      <TooltipProvider delayDuration={300}>
        <Tooltip>
          <TooltipTrigger asChild>
            <Button 
              variant="ghost" 
              size="icon" 
              className={`h-10 w-10 rounded-xl border backdrop-blur-sm transition-all duration-200 ${getActiveClasses()} ${
                disabled ? 'opacity-50 cursor-not-allowed' : ''
              }`}
              onClick={onClick}
              disabled={disabled}
            >
              {children}
            </Button>
          </TooltipTrigger>
          <TooltipContent side="right">
            <span className="text-sm">{tooltip}</span>
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
    );
  };
  
  return (
    <motion.div 
      className="h-full bg-white dark:bg-gray-900 border-r border-gray-200 dark:border-gray-700 shadow-lg flex flex-col items-center py-6 space-y-4"
      initial={{ opacity: 0, x: -20 }}
      animate={{ opacity: 1, x: 0 }}
      transition={{ duration: 0.3, delay: 0.1 }}
    >
      {/* View Controls */}
      <div className="flex flex-col space-y-3">
        <ToolButton
          onClick={onZoomIn}
          tooltip={`${t('tools.zoomIn')} (+)`}
        >
          <ZoomIn className="h-4 w-4 text-gray-700 dark:text-white" />
        </ToolButton>
        
        <ToolButton
          onClick={onZoomOut}
          tooltip={`${t('tools.zoomOut')} (-)`}
        >
          <ZoomOut className="h-4 w-4 text-gray-700 dark:text-white" />
        </ToolButton>
        
        <ToolButton
          onClick={onResetView}
          tooltip={`${t('tools.resetView')} (R)`}
        >
          <Maximize2 className="h-4 w-4 text-gray-700 dark:text-white" />
        </ToolButton>
      </div>

      {/* Separator */}
      <div className="w-8 h-px bg-gray-300 dark:bg-gray-600" />

      {/* Edit Tools */}
      <div className="flex flex-col space-y-3">
        <ToolButton
          active={editMode}
          variant="edit"
          onClick={onToggleEditMode}
          tooltip={`${editMode ? "Exit Polygon Creation" : "Create New Polygon"} (E)`}
        >
          <Plus className="h-4 w-4 text-gray-700 dark:text-white" />
        </ToolButton>

        <ToolButton
          active={slicingMode}
          variant="slice"
          onClick={onToggleSlicingMode}
          tooltip={`${slicingMode ? "Exit Slicing Mode" : "Split Polygon"} (S)`}
        >
          <Scissors className="h-4 w-4 text-gray-700 dark:text-white" />
        </ToolButton>

        <ToolButton
          active={pointAddingMode}
          variant="add"
          onClick={onTogglePointAddingMode}
          tooltip={`${pointAddingMode ? "Exit Point Adding" : "Add Points to Polygon"} (A)`}
        >
          <Edit3 className="h-4 w-4 text-gray-700 dark:text-white" />
        </ToolButton>

        <ToolButton
          active={deleteMode}
          variant="delete"
          onClick={onToggleDeleteMode}
          tooltip={`${deleteMode ? "Exit Delete Mode" : "Delete Polygon Mode"} (D)`}
        >
          <Trash2 className="h-4 w-4 text-gray-700 dark:text-white" />
        </ToolButton>
      </div>

      {/* Separator */}
      <div className="w-8 h-px bg-gray-300 dark:bg-gray-600" />

      {/* History Controls */}
      <div className="flex flex-col space-y-3">
        <ToolButton
          onClick={onUndo}
          disabled={!canUndo}
          tooltip="Undo (Ctrl+Z)"
        >
          <Undo2 className="h-4 w-4 text-gray-700 dark:text-white" />
        </ToolButton>

        <ToolButton
          onClick={onRedo}
          disabled={!canRedo}
          tooltip="Redo (Ctrl+Y)"
        >
          <Redo2 className="h-4 w-4 text-gray-700 dark:text-white" />
        </ToolButton>
      </div>

      {/* Separator */}
      <div className="w-8 h-px bg-gray-300 dark:bg-gray-600" />

      {/* Save */}
      <ToolButton
        onClick={onSave}
        disabled={saving}
        tooltip="Save Changes (Ctrl+S)"
      >
        {saving ? 
          <Loader2 className="h-4 w-4 animate-spin text-gray-700 dark:text-white" /> : 
          <Save className="h-4 w-4 text-gray-700 dark:text-white" />
        }
      </ToolButton>
    </motion.div>
  );
};

export default EditorToolbar;
