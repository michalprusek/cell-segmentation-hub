
import React, { useState, useCallback } from 'react';
import { useParams } from 'react-router-dom';
import { useLanguage } from '@/contexts/LanguageContext';
import { SegmentationData, ProjectImage } from '@/types';
import { SegmentationProvider } from '../../contexts/SegmentationContext';
import EditorLayout from '../layout/EditorLayout';
import EditorHeader from '../EditorHeader';
import EditorContent from '../layout/EditorContent';
import EditorToolbar from '../EditorToolbar';
import EditorCanvas from '../EditorCanvas';
import RegionPanel from '../RegionPanel';
import StatusBar from '../StatusBar';
import KeyboardShortcutsHelp from '../KeyboardShortcutsHelp';
import KeyboardEventHandler from '../keyboard/KeyboardEventHandler';

interface EditorContainerProps {
  projectId: string;
  projectTitle: string;
  imageName: string;
  imageSrc: string;
  loading: boolean;
  saving: boolean;
  segmentation: SegmentationData | null;
  setSegmentation: (seg: SegmentationData | null) => void;
  selectedPolygonId: string | null;
  hoveredVertex: { polygonId: string | null, vertexIndex: number | null };
  zoom: number;
  offset: { x: number; y: number };
  history: SegmentationData[];
  historyIndex: number;
  dragState: React.MutableRefObject<{ isDragging: boolean; startX: number; startY: number }>;
  vertexDragState: React.MutableRefObject<{ isDragging: boolean; polygonId: string; vertexIndex: number }>;
  tempPoints: Array<{ x: number; y: number }> | null;
  cursorPosition: { x: number, y: number } | null;
  editMode: boolean;
  slicingMode: boolean;
  pointAddingMode: boolean;
  deleteMode: boolean;
  sliceStartPoint: { x: number, y: number } | null;
  hoveredSegment: { polygonId: string; segmentIndex: number } | null;
  canvasContainerRef: React.RefObject<HTMLDivElement>;
  projectImages: ProjectImage[];
  sourcePolygonId: string | null;
  setSelectedPolygonId: (id: string | null) => void;
  handleMouseDown: (e: React.MouseEvent) => void;
  handleMouseMove: (e: React.MouseEvent) => void;
  handleMouseUp: (e: React.MouseEvent) => void;
  handleZoomIn: () => void;
  handleZoomOut: () => void;
  handleUndo: () => void;
  handleRedo: () => void;
  handleDeletePolygon: () => void;
  handleResetView: () => void;
  handleSave: () => Promise<void>;
  navigateToImage: (direction: 'prev' | 'next') => void;
  toggleEditMode: () => void;
  toggleSlicingMode: () => void;
  togglePointAddingMode: () => void;
  toggleDeleteMode: () => void;
  exitAllEditModes: () => void;
  isShiftPressed: boolean;
  isZooming?: boolean;
  handleSlicePolygon: (id: string) => void;
  handleEditPolygon: (id: string) => void;
  handleDeleteVertex: (polygonId: string, vertexIndex: number) => void;
  handleDuplicateVertex: (polygonId: string, vertexIndex: number) => void;
  imageDimensions?: { width: number, height: number } | null;
  handleImageLoad?: (width: number, height: number) => void;
  hiddenPolygonIds: Set<string>;
  setHiddenPolygonIds: (ids: Set<string> | ((prev: Set<string>) => Set<string>)) => void;
}

/**
 * HlavnÃ­ kontejner pro editor segmentace
 */
const EditorContainer = ({
  projectId,
  projectTitle,
  imageName,
  imageSrc,
  loading,
  saving,
  segmentation,
  setSegmentation,
  selectedPolygonId,
  hoveredVertex,
  zoom,
  offset,
  history,
  historyIndex,
  dragState,
  vertexDragState,
  tempPoints,
  cursorPosition,
  editMode,
  slicingMode,
  pointAddingMode,
  deleteMode,
  sliceStartPoint,
  hoveredSegment,
  canvasContainerRef,
  projectImages,
  sourcePolygonId,
  setSelectedPolygonId,
  handleMouseDown,
  handleMouseMove,
  handleMouseUp,
  handleZoomIn,
  handleZoomOut,
  handleUndo,
  handleRedo,
  handleDeletePolygon,
  handleResetView,
  handleSave,
  navigateToImage,
  toggleEditMode,
  toggleSlicingMode,
  togglePointAddingMode,
  toggleDeleteMode,
  exitAllEditModes,
  isShiftPressed,
  isZooming = false,
  handleSlicePolygon,
  handleEditPolygon,
  handleDeleteVertex,
  handleDuplicateVertex,
  imageDimensions,
  handleImageLoad,
  hiddenPolygonIds,
  setHiddenPolygonIds
}: EditorContainerProps) => {
  const { t } = useLanguage();
  const { imageId } = useParams<{ projectId: string; imageId: string }>();
  
  // Polygon visibility handler
  const handleTogglePolygonVisibility = useCallback((polygonId: string) => {
    setHiddenPolygonIds(prev => {
      const newSet = new Set(prev);
      if (newSet.has(polygonId)) {
        newSet.delete(polygonId);
      } else {
        newSet.add(polygonId);
      }
      return newSet;
    });
  }, []);

  // Polygon rename handler
  const handleRenamePolygon = useCallback((polygonId: string, name: string) => {
    if (segmentation) {
      const updatedSegmentation = {
        ...segmentation,
        polygons: segmentation.polygons.map(p => 
          p.id === polygonId ? { ...p, name } : p
        )
      };
      setSegmentation(updatedSegmentation);
    }
  }, [segmentation, setSegmentation]);

  // Polygon delete handler for RegionPanel
  const handleDeletePolygonFromPanel = useCallback((polygonId: string) => {
    if (segmentation) {
      const updatedSegmentation = {
        ...segmentation,
        polygons: segmentation.polygons.filter(p => p.id !== polygonId)
      };
      setSegmentation(updatedSegmentation);
      if (polygonId === selectedPolygonId) {
        setSelectedPolygonId(null);
      }
      // Remove polygon ID from hidden polygons set
      setHiddenPolygonIds(prev => {
        const newSet = new Set(prev);
        newSet.delete(polygonId);
        return newSet;
      });
    }
  }, [segmentation, setSegmentation, selectedPolygonId, setSelectedPolygonId]);
  
  const currentImageIndex = projectImages.findIndex(img => img.id === imageId);
  const totalImages = projectImages.length;
  
  const canUndo = historyIndex > 0;
  const canRedo = history.length > 0 && historyIndex < history.length - 1;
  
  const isAnyEditModeActive = editMode || slicingMode || pointAddingMode || deleteMode;

  return (
    <SegmentationProvider segmentation={segmentation}>
      <KeyboardEventHandler
        onUndo={handleUndo}
        onRedo={handleRedo}
        toggleEditMode={toggleEditMode}
        toggleSlicingMode={toggleSlicingMode}
        togglePointAddingMode={togglePointAddingMode}
        exitAllEditModes={exitAllEditModes}
      >
        <EditorLayout>
          <EditorHeader 
            projectId={projectId}
            projectTitle={projectTitle}
            imageName={imageName}
            currentImageIndex={currentImageIndex !== -1 ? currentImageIndex : 0}
            totalImages={totalImages}
            onNavigate={navigateToImage}
          />
          
          <EditorContent>
            {/* Left Toolbar */}
            <EditorToolbar 
              zoom={zoom}
              onZoomIn={handleZoomIn}
              onZoomOut={handleZoomOut}
              onResetView={handleResetView}
              onSave={handleSave}
              saving={saving}
              editMode={editMode}
              slicingMode={slicingMode}
              pointAddingMode={pointAddingMode}
              deleteMode={deleteMode}
              onToggleEditMode={toggleEditMode}
              onToggleSlicingMode={toggleSlicingMode}
              onTogglePointAddingMode={togglePointAddingMode}
              onToggleDeleteMode={toggleDeleteMode}
              onUndo={handleUndo}
              onRedo={handleRedo}
              canUndo={canUndo}
              canRedo={canRedo}
            />
            
            {/* Central Canvas Area */}
            <div className="relative flex flex-col h-full">
              <div className="flex-1 flex items-center justify-center p-4 relative">
                <EditorCanvas 
                  loading={loading}
                  segmentation={segmentation}
                  zoom={zoom}
                  offset={offset}
                  selectedPolygonId={selectedPolygonId}
                  hoveredVertex={hoveredVertex}
                  imageSrc={imageSrc}
                  onMouseDown={handleMouseDown}
                  onMouseMove={handleMouseMove}
                  onMouseUp={handleMouseUp}
                  dragState={dragState}
                  vertexDragState={vertexDragState}
                  containerRef={canvasContainerRef}
                  editMode={editMode}
                  slicingMode={slicingMode}
                  pointAddingMode={pointAddingMode}
                  deleteMode={deleteMode}
                  tempPoints={tempPoints}
                  cursorPosition={cursorPosition}
                  sliceStartPoint={sliceStartPoint}
                  hoveredSegment={hoveredSegment}
                  isShiftPressed={isShiftPressed}
                  onSelectPolygon={setSelectedPolygonId}
                  onDeletePolygon={handleDeletePolygon}
                  onSlicePolygon={handleSlicePolygon}
                  onEditPolygon={handleEditPolygon}
                  onDeleteVertex={handleDeleteVertex}
                  onDuplicateVertex={handleDuplicateVertex}
                  sourcePolygonId={sourcePolygonId}
                  imageDimensions={imageDimensions}
                  onImageLoad={handleImageLoad}
                  isZooming={isZooming}
                  hiddenPolygonIds={hiddenPolygonIds}
                />
                
              </div>
              
              {/* Keyboard Shortcuts Help - positioned above StatusBar */}
              <div className="relative">
                <div className="absolute bottom-full left-4 mb-2 z-10">
                  <KeyboardShortcutsHelp />
                </div>
                <StatusBar 
                  segmentation={segmentation} 
                  editMode={isAnyEditModeActive ? 
                    (editMode ? "edit" : slicingMode ? "slice" : "add-point") : undefined}
                />
              </div>
            </div>
            
            {/* Right Panel */}
            <RegionPanel 
              loading={loading}
              segmentation={segmentation}
              selectedPolygonId={selectedPolygonId}
              onSelectPolygon={setSelectedPolygonId}
              hiddenPolygonIds={hiddenPolygonIds}
              onTogglePolygonVisibility={handleTogglePolygonVisibility}
              onRenamePolygon={handleRenamePolygon}
              onDeletePolygon={handleDeletePolygonFromPanel}
            />
          </EditorContent>
        </EditorLayout>
      </KeyboardEventHandler>
    </SegmentationProvider>
  );
};

export default EditorContainer;
