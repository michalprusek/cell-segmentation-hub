name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly security scans
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  DOCKER_BUILDKIT: 1

jobs:
  # Code Quality & Linting
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Frontend linting
        run: npm run lint

      - name: Setup Node.js for backend
        working-directory: ./backend
        run: npm ci

      - name: Backend linting
        working-directory: ./backend
        run: npm run lint

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python linting tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort

      - name: Python linting (ML service)
        working-directory: ./backend/segmentation
        run: |
          ruff check .
          black --check .
          isort --check-only .

  # Unit Tests
  test-frontend:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run frontend unit tests
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage

      - name: Store coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: frontend-coverage
          path: coverage/

  test-backend:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './backend/package-lock.json'

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Setup test database
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        run: |
          npx prisma migrate dev --name init
          npx prisma generate

      - name: Run backend unit tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          NODE_ENV: test
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/coverage-final.json
          flags: backend
          name: backend-coverage

  test-ml:
    name: ML Service Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install ML dependencies
        working-directory: ./backend/segmentation
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run ML service unit tests
        working-directory: ./backend/segmentation
        run: |
          pytest --cov=api --cov=services --cov=models \
                 --cov-report=xml --cov-report=html \
                 --junit-xml=junit.xml -v

      - name: Upload ML coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/segmentation/coverage.xml
          flags: ml-service
          name: ml-coverage

  # Integration Tests
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: integration_test_db
          POSTGRES_USER: test_user
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Start services with Docker Compose
        run: |
          docker compose -f docker-compose.test.yml up -d

      - name: Wait for services to be healthy
        run: |
          chmod +x scripts/wait-for-services.sh
          ./scripts/wait-for-services.sh -t 300 -i 5 http://localhost:3001/health http://localhost:8000/health

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run integration tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/integration_test_db
          API_URL: http://localhost:3001
          ML_SERVICE_URL: http://localhost:8000
        run: npm run test:integration

      - name: Stop services
        if: always()
        run: docker compose -f docker-compose.test.yml down

  # E2E Tests
  test-e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Start application services
        run: |
          docker compose up -d

      - name: Wait for application to be ready
        run: |
          chmod +x scripts/wait-for-services.sh
          ./scripts/wait-for-services.sh -t 300 -i 5 http://localhost:3000 http://localhost:3001/health

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

      - name: Stop services
        if: always()
        run: docker compose down

  # Security Scans
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security scanning tools
        run: |
          npm install -g audit-ci
          python -m pip install --upgrade pip safety bandit semgrep

      - name: Run dependency audit
        run: |
          chmod +x tests/security/dependency-audit.sh
          ./tests/security/dependency-audit.sh

      - name: Run Bandit security scan (Python)
        working-directory: ./backend/segmentation
        run: |
          bandit -r . -f json -o bandit-report.json || true

      - name: Run Semgrep security scan
        run: |
          semgrep --config=auto --json --output=semgrep-report.json . || true

      - name: Prepare security reports
        run: |
          mkdir -p security-reports
          cp backend/segmentation/bandit-report.json security-reports/ 2>/dev/null || echo "bandit-report.json not found"
          cp semgrep-report.json security-reports/ 2>/dev/null || echo "semgrep-report.json not found"

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: security-reports/

  # Build & Docker
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, test-frontend, test-backend, test-ml]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Build backend
        working-directory: ./backend
        run: npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        run: |
          docker build -f docker/frontend.Dockerfile -t spheroseg-frontend:${{ github.sha }} .
          docker build -f docker/backend.Dockerfile -t spheroseg-backend:${{ github.sha }} .
          docker build -f docker/ml-service.Dockerfile -t spheroseg-ml:${{ github.sha }} .

      - name: Test Docker containers
        run: |
          docker compose -f docker-compose.test.yml up -d
          chmod +x scripts/wait-for-services.sh
          ./scripts/wait-for-services.sh -t 120 -i 5 http://localhost:3001/health http://localhost:8000/health
          docker compose -f docker-compose.test.yml down

      - name: Login to container registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker images
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          docker tag spheroseg-frontend:${{ github.sha }} ghcr.io/${{ github.repository }}/frontend:latest
          docker tag spheroseg-backend:${{ github.sha }} ghcr.io/${{ github.repository }}/backend:latest
          docker tag spheroseg-ml:${{ github.sha }} ghcr.io/${{ github.repository }}/ml-service:latest
          
          docker push ghcr.io/${{ github.repository }}/frontend:latest
          docker push ghcr.io/${{ github.repository }}/backend:latest
          docker push ghcr.io/${{ github.repository }}/ml-service:latest

  # Performance Tests
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup k6
        uses: grafana/setup-k6-action@v1

      - name: Start application
        run: |
          docker compose up -d

      - name: Wait for services
        run: |
          chmod +x scripts/wait-for-services.sh
          ./scripts/wait-for-services.sh -t 300 -i 5 http://localhost:3001/health

      - name: Run k6 performance tests
        run: |
          k6 run tests/performance/api-load-test.js

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Run Lighthouse CI
        run: |
          lhci collect --url http://localhost:3000
          lhci assert

      - name: Stop services
        if: always()
        run: docker compose down

  # Deployment (to staging)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    needs: [build, test-integration, test-e2e, security-scan]
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          # Add your staging deployment commands here
          # For example: kubectl, docker swarm, AWS ECS, etc.

      - name: Run smoke tests
        run: |
          # Wait for staging deployment to be ready with timeout
          timeout 300 bash -c 'until curl -f ${{ secrets.STAGING_URL }}/health; do echo "Waiting for staging deployment..."; sleep 10; done'
          echo "✅ Staging deployment successful"

  # Deployment (to production)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [build, test-integration, test-e2e, security-scan, performance]
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "🚀 Deploying to production environment..."
          # Add your production deployment commands here

      - name: Run smoke tests
        run: |
          # Wait for production deployment to be ready with timeout
          timeout 300 bash -c 'until curl -f ${{ secrets.PRODUCTION_URL }}/health; do echo "Waiting for production deployment..."; sleep 10; done'
          echo "✅ Production deployment successful"

      - name: Notify deployment
        if: success()
        run: |
          echo "✅ SphereSeg successfully deployed to production!"
          # Add notification logic (Slack, Discord, email, etc.)

  # Nightly Security Scan
  nightly-security:
    name: Nightly Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install OWASP ZAP
        run: |
          # Download OWASP ZAP with checksum verification
          wget -q https://github.com/zaproxy/zaproxy/releases/download/v2.12.0/ZAP_2.12.0_Linux.tar.gz
          
          # Verify SHA256 checksum
          echo "9c4493c991cb9347063864d2436a3795cf3b69760625e7b3db401cd342d3fc55  ZAP_2.12.0_Linux.tar.gz" | sha256sum -c
          
          # Extract and install only after successful verification
          tar -xf ZAP_2.12.0_Linux.tar.gz
          sudo mv ZAP_2.12.0 /opt/zaproxy
          sudo ln -s /opt/zaproxy/zap.sh /usr/local/bin/zap.sh

      - name: Start application
        run: |
          docker compose up -d

      - name: Wait for services to be ready
        run: |
          chmod +x scripts/wait-for-services.sh
          ./scripts/wait-for-services.sh -t 300 -i 5 http://localhost:3001/health http://localhost:8000/health

      - name: Run comprehensive security scan
        run: |
          python tests/security/zap-baseline-scan.py \
            --target http://localhost:3000 \
            --api http://localhost:3001

      - name: Prepare security reports
        run: |
          mkdir -p security-reports
          # Copy any generated reports from ZAP scan
          find . -name "*.html" -o -name "*.xml" -o -name "*report*" -type f -exec cp {} security-reports/ \; 2>/dev/null || echo "No ZAP reports found"

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: nightly-security-reports
          path: security-reports/

      - name: Notify on security issues
        if: failure()
        run: |
          echo "🚨 Security issues found in nightly scan!"
          # Add notification logic for security issues

      - name: Stop services
        if: always()
        run: docker compose down