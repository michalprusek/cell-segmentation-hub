services:
  # Frontend service (production build)
  frontend:
    build:
      context: .
      dockerfile: docker/frontend.Dockerfile
      target: production
    container_name: spheroseg-frontend
    env_file: ${ENV_FILE}
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - spheroseg-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Backend service (production)
  backend:
    build:
      context: ./backend
      dockerfile: ../docker/backend.Dockerfile
      target: production
    container_name: spheroseg-backend
    env_file: ${ENV_FILE}
    ports:
      - "3001:3001"
    volumes:
      - backend-uploads:/app/uploads
      - backend-db:/app/data
    depends_on:
      - ml-service
      - redis
    networks:
      - spheroseg-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ML Service (production)
  ml-service:
    build:
      context: ./backend/segmentation
      dockerfile: ../../docker/ml.Dockerfile
      target: production
    container_name: spheroseg-ml
    env_file: ${ENV_FILE}
    ports:
      - "8000:8000"
    volumes:
      # ML models should be pre-populated via download-models.sh script
      # or mounted from a host directory with pre-downloaded models
      - ml-models:/app/models
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    networks:
      - spheroseg-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Production database (PostgreSQL)
  postgres:
    image: postgres:15-alpine
    container_name: spheroseg-postgres
    env_file: ${ENV_FILE}
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-spheroseg_production}
      - POSTGRES_USER=${POSTGRES_USER:-spheroseg}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    command: >
      sh -c "
        if [ -z \"$$POSTGRES_PASSWORD\" ]; then
          echo 'ERROR: POSTGRES_PASSWORD environment variable is not set or is empty' >&2;
          exit 1;
        fi;
        exec docker-entrypoint.sh postgres
      "
    networks:
      - spheroseg-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-spheroseg} -d ${POSTGRES_DB:-spheroseg_production}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: spheroseg-redis
    command: redis-server /usr/local/etc/redis/redis.conf
    env_file: ${ENV_FILE}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - spheroseg-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD-SHELL", "if [ -z \"$$REDIS_PASSWORD\" ]; then redis-cli ping; else redis-cli -a \"$$REDIS_PASSWORD\" ping; fi"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: spheroseg-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.production.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - spheroseg-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Grafana visualization
  grafana:
    image: grafana/grafana:latest
    container_name: spheroseg-grafana
    env_file: ${ENV_FILE}
    ports:
      - "3030:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/datasources.production.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    networks:
      - spheroseg-network
    depends_on:
      - prometheus
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx reverse proxy and SSL termination
  nginx:
    image: nginx:alpine
    container_name: spheroseg-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.production.conf:/etc/nginx/nginx.conf:ro
      # ================================
      # SSL CERTIFICATES - MANDATORY IN PRODUCTION
      # ================================
      # 1. Create the directory: mkdir -p docker/nginx/ssl
      # 2. Place certificate files:
      #    - server.crt (SSL certificate - readable by nginx, permissions 644)
      #    - server.key (SSL private key - permissions 600, owner nginx/root only)
      # 3. For testing with self-signed certificates, generate with:
      #    openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
      #      -keyout docker/nginx/ssl/server.key \
      #      -out docker/nginx/ssl/server.crt \
      #      -subj "/C=US/ST=State/L=City/O=Organization/OU=OrgUnit/CN=yourdomain.com"
      # 4. IMPORTANT: Uncomment the volume mapping below after certificates are in place:
      # - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - spheroseg-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

networks:
  spheroseg-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  ml-models:
    driver: local
  backend-db:
    driver: local
  backend-uploads:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  nginx-logs:
    driver: local